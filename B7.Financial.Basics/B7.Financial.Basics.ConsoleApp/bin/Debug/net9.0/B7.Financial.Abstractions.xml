<?xml version="1.0"?>
<doc>
    <assembly>
        <name>B7.Financial.Abstractions</name>
    </assembly>
    <members>
        <member name="T:B7.Financial.Abstractions.Date.BusinessDayConvention">
            <inheritdoc />
        </member>
        <member name="P:B7.Financial.Abstractions.Date.BusinessDayConvention.Name">
            <inheritdoc />
        </member>
        <member name="M:B7.Financial.Abstractions.Date.BusinessDayConvention.Adjust(System.DateOnly,B7.Financial.Abstractions.Date.IHolidayCalendar)">
            <inheritdoc />
        </member>
        <member name="T:B7.Financial.Abstractions.Date.CombinedHolidayCalendar">
            <summary>
            A holiday calendar implementation that combines two other calendars.
            <para>
            This immutable implementation of <see cref="T:B7.Financial.Abstractions.Date.IHolidayCalendar"/> stores two underlying calendars. <br/>
            A date is a holiday if either calendar defines it as a holiday.
            </para>
            </summary>
        </member>
        <member name="F:B7.Financial.Abstractions.Date.CombinedHolidayCalendar.Joiner">
            <summary>
            Joiner character for combining two calendars.
            </summary>
        </member>
        <member name="P:B7.Financial.Abstractions.Date.CombinedHolidayCalendar.Calendar1">
            <summary>
            Calendar 1.
            </summary>
        </member>
        <member name="P:B7.Financial.Abstractions.Date.CombinedHolidayCalendar.Calendar2">
            <summary>
            Calendar 2.
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.CombinedHolidayCalendar.#ctor(B7.Financial.Abstractions.Date.IHolidayCalendar,B7.Financial.Abstractions.Date.IHolidayCalendar)">
            <summary>
            Combines two holiday calendars into one.
            </summary>
            <param name="calendar1"></param>
            <param name="calendar2"></param>
        </member>
        <member name="P:B7.Financial.Abstractions.Date.CombinedHolidayCalendar.Name">
            <inheritdoc />
        </member>
        <member name="M:B7.Financial.Abstractions.Date.CombinedHolidayCalendar.IsHoliday(System.DateOnly)">
            <inheritdoc />
        </member>
        <member name="T:B7.Financial.Abstractions.Date.DateAdjuster">
            <summary>
            Represents a method that adjusts a <see cref="T:System.DateOnly"/> value based on custom logic.
            </summary>
            <param name="date">The <see cref="T:System.DateOnly"/> value to be adjusted.</param>
            <returns>A new <see cref="T:System.DateOnly"/> value that represents the adjusted date.</returns>
        </member>
        <member name="T:B7.Financial.Abstractions.Date.DayCount">
            <summary>
            A convention defining how to calculate fractions of a year.
            </summary>
            <remarks>
            The purpose of this convention is to define how to convert dates into numeric year fractions. <br/>
            This is of use when calculating accrued interest over time.
            </remarks>
        </member>
        <member name="P:B7.Financial.Abstractions.Date.DayCount.Name">
            <inheritdoc />
        </member>
        <member name="M:B7.Financial.Abstractions.Date.DayCount.YearFraction(System.DateOnly,System.DateOnly)">
            <summary>
            Gets the year fraction between the specified dates. <br/>
            Given two dates, this method returns the fraction of a year between these <br/>
            dates according to the convention. The dates must be in order.
            </summary>
            <param name="firstDate">The first date</param>
            <param name="secondDate">The second date, on or after the <see cref="!:firstDate"/></param>
            <returns>The year fraction, zero or greater</returns>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.DayCount.YearFraction(System.DateOnly,System.DateOnly,B7.Financial.Abstractions.Date.IDayCount.IScheduleInfo)">
            <inheritdoc />
        </member>
        <member name="M:B7.Financial.Abstractions.Date.DayCount.Days(System.DateOnly,System.DateOnly)">
            <inheritdoc />
        </member>
        <member name="T:B7.Financial.Abstractions.Date.DayCountJsonConverter">
            <summary>
            JSON converter for <see cref="T:B7.Financial.Abstractions.Date.IDayCount"/>.
            </summary>
            <param name="factory"></param>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.DayCountJsonConverter.#ctor(B7.Financial.Abstractions.Date.IDayCountFactory)">
            <summary>
            JSON converter for <see cref="T:B7.Financial.Abstractions.Date.IDayCount"/>.
            </summary>
            <param name="factory"></param>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.DayCountJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Reads a <see cref="T:B7.Financial.Abstractions.Date.IDayCount"/> from JSON.
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.DayCountJsonConverter.Write(System.Text.Json.Utf8JsonWriter,B7.Financial.Abstractions.Date.IDayCount,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Writes a <see cref="T:B7.Financial.Abstractions.Date.IDayCount"/> to JSON as a string representation of its name.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:B7.Financial.Abstractions.Date.HolidayCalendar">
            <inheritdoc />
        </member>
        <member name="P:B7.Financial.Abstractions.Date.HolidayCalendar.Name">
            <inheritdoc/>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.HolidayCalendar.IsHoliday(System.DateOnly)">
            <inheritdoc />
        </member>
        <member name="M:B7.Financial.Abstractions.Date.HolidayCalendar.IsBusinessDay(System.DateOnly)">
            <inheritdoc />
        </member>
        <member name="M:B7.Financial.Abstractions.Date.HolidayCalendar.AdjustBy(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:B7.Financial.Abstractions.Date.HolidayCalendar.Shift(System.DateOnly,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:B7.Financial.Abstractions.Date.HolidayCalendar.Next(System.DateOnly)">
            <inheritdoc />
        </member>
        <member name="M:B7.Financial.Abstractions.Date.HolidayCalendar.NextOrSame(System.DateOnly)">
            <inheritdoc />
        </member>
        <member name="M:B7.Financial.Abstractions.Date.HolidayCalendar.Previous(System.DateOnly)">
            <inheritdoc />
        </member>
        <member name="M:B7.Financial.Abstractions.Date.HolidayCalendar.PreviousOrSame(System.DateOnly)">
            <inheritdoc />
        </member>
        <member name="M:B7.Financial.Abstractions.Date.HolidayCalendar.NextSameOrLastInMonth(System.DateOnly)">
            <inheritdoc />
        </member>
        <member name="M:B7.Financial.Abstractions.Date.HolidayCalendar.IsLastBusinessDayOfMonth(System.DateOnly)">
            <inheritdoc />
        </member>
        <member name="M:B7.Financial.Abstractions.Date.HolidayCalendar.LastBusinessDayOfMonth(System.DateOnly)">
            <inheritdoc />
        </member>
        <member name="M:B7.Financial.Abstractions.Date.HolidayCalendar.DaysBetween(System.DateOnly,System.DateOnly)">
            <inheritdoc />
        </member>
        <member name="M:B7.Financial.Abstractions.Date.HolidayCalendar.BusinessDays(System.DateOnly,System.DateOnly)">
            <inheritdoc />
        </member>
        <member name="M:B7.Financial.Abstractions.Date.HolidayCalendar.Holidays(System.DateOnly,System.DateOnly)">
            <inheritdoc />
        </member>
        <member name="M:B7.Financial.Abstractions.Date.HolidayCalendar.Equals(B7.Financial.Abstractions.Date.IHolidayCalendar)">
            <inheritdoc />
        </member>
        <member name="M:B7.Financial.Abstractions.Date.HolidayCalendar.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:B7.Financial.Abstractions.Date.HolidayCalendar.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:B7.Financial.Abstractions.Date.IBusinessDayConvention">
            <summary>
            A convention defining how to adjust a date if it falls on a day other than a business day.
            <para>
            The purpose of this convention is to define how to handle non-business days. <br/>
            When processing dates in finance, it is typically intended that non-business days, <br/>
            such as weekends and holidays, are converted to a nearby valid business day. <br/>
            The convention, in conjunction with a <see cref="T:B7.Financial.Abstractions.Date.IHolidayCalendar"/>, <br/>
            defines exactly how the adjustment should be made.
            </para>
            <para>
            The most common implementations are provided in <see cref="T:B7.Financial.Abstractions.Date.IBusinessDayConventionFactory"/>. <br/>
            Additional implementations may be added by implementing this interface.
            </para>
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.IBusinessDayConvention.Adjust(System.DateOnly,B7.Financial.Abstractions.Date.IHolidayCalendar)">
            <summary>
            Adjusts the date as necessary if it is not a business day.
            <para>
            If the date is a business day it will be returned unaltered. <br/>
            If the date is not a business day, the convention will be applied.
            </para>
            </summary>
            <param name="date">The date to adjust</param>
            <param name="calendar">The calendar that defines holidays and business days</param>
            <returns>The adjusted date</returns>
        </member>
        <member name="T:B7.Financial.Abstractions.Date.IBusinessDayConventionFactory">
            <summary>
            Provides a factory for creating business day conventions.
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.IBusinessDayConventionFactory.BusinessDayConventionNames">
            <summary>
            Retrieves the names of all available business day conventions.
            </summary>
            <returns> A collection of business day convention names. </returns>
        </member>
        <member name="T:B7.Financial.Abstractions.Date.IDayCount">
            <summary>
            Common interface for day count conventions.
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.IDayCount.YearFraction(System.DateOnly,System.DateOnly,B7.Financial.Abstractions.Date.IDayCount.IScheduleInfo)">
            <summary>
            Gets the year fraction between the specified dates. <br/>
            Given two dates, this method returns the fraction of a year between these <br/>
            dates according to the convention. The dates must be in order.
            </summary>
            <param name="firstDate">The first date</param>
            <param name="secondDate">The second date, on or after the <see cref="!:firstDate"/></param>
            <param name="scheduleInfo">The schedule information</param>
            <returns>The year fraction, zero or greater</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.IDayCount.Days(System.DateOnly,System.DateOnly)">
            <summary>
            Calculates the number of days between the specified dates using the rules of this day count.
            <para>
            A day count is typically defines as a count of days divided by a year estimate. <br/>
            This method returns the count of days, which is the numerator of the division. <br/>
            For example, the 'Act/Act' day count will return the actual number of days between <br/>
            the two dates, but the '30/360 ISDA' will return a value based on 30 day months.
            </para>
            </summary>
            <param name="firstDate">The first date</param>
            <param name="secondDate">The second date</param>
            <returns>The number of days, as determined by the day count</returns>
        </member>
        <member name="T:B7.Financial.Abstractions.Date.IDayCount.IScheduleInfo">
            <summary>
            Information about the schedule necessary to calculate the day count.
            <para>
            Some <see cref="T:B7.Financial.Abstractions.Date.DayCount"/> implementations require additional information about the schedule. <br/>
            Implementations of this interface provide that information.
            </para>
            </summary>
        </member>
        <member name="P:B7.Financial.Abstractions.Date.IDayCount.IScheduleInfo.StartDate">
            <summary>
            The start date of the schedule.
            <para>
            The first date in the schedule. <br/>
            If the schedule adjusts for business days, then this is the adjusted date.
            </para>
            </summary>
        </member>
        <member name="P:B7.Financial.Abstractions.Date.IDayCount.IScheduleInfo.EndDate">
            <summary>
            The end date of the schedule.
            <para>
            The last date in the schedule. <br/>
            If the schedule adjusts for business days, then this is the adjusted date.
            </para>
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.IDayCount.IScheduleInfo.PeriodEndDate(System.DateOnly)">
            <summary>
            Gets the end date of the schedule period. <br/>
            This is called when a day count requires the end date of the schedule period.
            </summary>
            <param name="date">The date to find the period end date for</param>
            <returns>The period end date</returns>
        </member>
        <member name="P:B7.Financial.Abstractions.Date.IDayCount.IScheduleInfo.Frequency">
            <summary>
            The periodic frequency of the schedule. <br/>
            <remarks>
            This is called when a <see cref="T:B7.Financial.Abstractions.Date.IDayCount"/> requires the periodic frequency of the schedule.
            </remarks>
            </summary>
        </member>
        <member name="T:B7.Financial.Abstractions.Date.IDayCountFactory">
            <summary>
            Represents a factory for creating day count conventions.
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.IDayCountFactory.DayCountNames">
            <summary>
            Retrieves the names of all available day count conventions.
            </summary>
            <returns> A collection of day count convention names. </returns>
        </member>
        <member name="T:B7.Financial.Abstractions.Date.IHolidayCalendar">
            <summary>
            A holiday calendar, classifying dates as holidays or business days.
            <para>
            Many calculations in finance require knowledge of whether a date is a business day or not. <br/>
            This interface encapsulates that knowledge, with each day treated as a holiday or a business day. <br/>
            Weekends are effectively treated as a special kind of holiday.
            </para>
            <para>
            Applications should refer to holidays using <see cref="T:B7.Financial.Abstractions.Date.IHolidayCalendarFactory"/>. <br/>
            The name must be resolved <see cref="!:IHolidayCalendarFactory.Of"/> to a <see cref="T:B7.Financial.Abstractions.Date.IHolidayCalendar"/> <br/>
            before the holiday data methods can be accessed. <br/>
            </para>
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.IHolidayCalendar.IsHoliday(System.DateOnly)">
            <summary>
            Checks if the specified date is a holiday. <br/>
            This is the opposite of <see cref="M:B7.Financial.Abstractions.Date.IHolidayCalendar.IsBusinessDay(System.DateOnly)"/>. <br/>
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.IHolidayCalendar.IsBusinessDay(System.DateOnly)">
            <summary>
            Checks if the specified date is a business day. <br/>
            This is the opposite of <see cref="M:B7.Financial.Abstractions.Date.IHolidayCalendar.IsHoliday(System.DateOnly)"/>. <br/>
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.IHolidayCalendar.AdjustBy(System.Int32)">
            <summary>
            Returns an adjuster that changes the date.
            </summary>
            <param name="days">The number of business days to adjust by</param>
            <returns></returns>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.IHolidayCalendar.Shift(System.DateOnly,System.Int32)">
            <summary>
            Shifts the date by a specified number of business days.
            <para>
            If the number of days is zero, the original date is returned. <br/>
            If the number of days is positive, the date is shifted forward. Later business days are chosen. <br/>
            If the number of days is negative, the date is shifted backward. Earlier business days are chosen. <br/>
            </para>
            </summary>
            <param name="date">The date to adjust</param>
            <param name="days"></param>
            <returns></returns>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.IHolidayCalendar.Next(System.DateOnly)">
            <summary>
            Finds the next business day, always returning a later date.
            <para>Given a date, this method returns the next business day.</para>
            </summary>
            <param name="date">The date to adjust</param>
            <returns>The first business day after the input date</returns>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.IHolidayCalendar.NextOrSame(System.DateOnly)">
            <summary>
            Finds the next business day, returning the input date if it is a business day.
            <para>
            Given a date, this method returns a business day. <br/>
            If the input date is a business day, it is returned. <br/>
            Otherwise, the next business day is returned.
            </para>
            </summary>
            <param name="date">The date to adjust</param>
            <returns>The input date if it is a business day, or the next business day</returns>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.IHolidayCalendar.Previous(System.DateOnly)">
            <summary>
            Finds the previous business day, always returning an earlier date.
            <para>Given a date, this method returns the previous business day.</para>
            </summary>
            <param name="date">The date to adjust</param>
            <returns>The first business day before the input date</returns>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.IHolidayCalendar.PreviousOrSame(System.DateOnly)">
            <summary>
            Finds the previous business day, returning the input date if it is a business day.
            <para>
            Given a date, this method returns a business day. <br/>
            If the input date is a business day, it is returned. <br/>
            Otherwise, the previous business day is returned.
            </para>
            </summary>
            <param name="date">The date to adjust</param>
            <returns>The input date if it is a business day, or the previous business day</returns>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.IHolidayCalendar.NextSameOrLastInMonth(System.DateOnly)">
            <summary>
            Finds the next business day within the month, returning the input date if it is a business day, <br/>
            or the last business day of the month if the next business day is in a different month.
            <para>
            Given a date, this method returns a business day. <br/>
            If the input date is a business day, it is returned. <br/>
            If the next business day is within the same month, it is returned. <br/>
            Otherwise, the last business day of the month is returned.
            </para>
            <remarks>
            Note that the result of this method may be earlier than the input date. <br/>
            This corresponds to the 'BusinessDayModifiedFollowing' business day convention. <br/>
            </remarks>
            </summary>
            <param name="date">The date to adjust</param>
            <returns>The input date if it is a business day, the next business day if within the same month or the last business day of the month</returns>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.IHolidayCalendar.IsLastBusinessDayOfMonth(System.DateOnly)">
            <summary>
            Checks if the specified date is the last business day of the month.
            <para>
            This returns true if the date specified is the last valid business day of the month.
            </para>
            </summary>
            <param name="date">The date to check</param>
            <returns>True if the specified date is the last business day of the month</returns>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.IHolidayCalendar.LastBusinessDayOfMonth(System.DateOnly)">
            <summary>
            Calculates the last business day of the month.
            <para>
            Given a date, this method returns the date of the last business day of the month.
            </para>
            </summary>
            <param name="date">The date to check</param>
            <returns>The date of the last business day of the month</returns>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.IHolidayCalendar.DaysBetween(System.DateOnly,System.DateOnly)">
            <summary>
            Calculates the number of business days between two dates.
            <para>
            This calculates the number of business days within the range. <br/>
            If the dates are equal, zero is returned. <br/>
            If the end is before the start, an exception is thrown.
            </para>
            </summary>
            <param name="startInclusive">The start date</param>
            <param name="endExclusive">The end date</param>
            <returns>The total number of business days between the start and end date</returns>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.IHolidayCalendar.BusinessDays(System.DateOnly,System.DateOnly)">
            <summary>
            Gets the stream of business days between the two dates.
            </summary>
            <param name="startInclusive">The start date</param>
            <param name="endExclusive">The end date</param>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.IHolidayCalendar.Holidays(System.DateOnly,System.DateOnly)">
            <summary>
            Gets the stream of holidays between the two dates.
            </summary>
            <param name="startInclusive">The start date</param>
            <param name="endExclusive">The end date</param>
            <returns></returns>
        </member>
        <member name="T:B7.Financial.Abstractions.Date.IHolidayCalendarFactory">
            <summary>
            Represents a factory for creating Holiday Calendars.
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.IHolidayCalendarFactory.HolidayCalendarNames">
            <summary>
            Retrieves the names of all available holiday calendars.
            </summary>
            <returns> A collection of holiday calendar names. </returns>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.IHolidayCalendarFactory.Combine(B7.Financial.Abstractions.Date.IHolidayCalendar,B7.Financial.Abstractions.Date.IHolidayCalendar)">
            <summary>
            Combines this holiday calendar with another.
            <para>
            The resulting calendar will declare a day as a business day if it is a <br/>
            business day in both source calendars.
            </para>
            </summary>
            <param name="calendar1">Calendar 1</param>
            <param name="calendar2">Calendar 2</param>
            <returns>The combined calendar</returns>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.IHolidayCalendarFactory.Link(B7.Financial.Abstractions.Date.IHolidayCalendar,B7.Financial.Abstractions.Date.IHolidayCalendar)">
            <summary>
            Links two holiday calendars together.
            <para>
            The resulting calendar will declare a day as a business day if it is a <br/>
            business day in either source calendar.
            </para>
            </summary>
            <param name="calendar1">Calendar 1</param>
            <param name="calendar2">Calendar 2</param>
            <returns>The linked calendar</returns>
        </member>
        <member name="T:B7.Financial.Abstractions.Date.LinkedHolidayCalendar">
            <summary>
            A holiday calendar implementation that links two other calendars.
            <para>
            This immutable implementation of <see cref="T:B7.Financial.Abstractions.Date.IHolidayCalendar"/> stores two underlying calendars. <br/>
            A date is a holiday if both calendars defines it as a holiday.
            </para>
            </summary>
        </member>
        <member name="F:B7.Financial.Abstractions.Date.LinkedHolidayCalendar.Joiner">
            <summary>
            Joiner character for linking two calendars.
            </summary>
        </member>
        <member name="P:B7.Financial.Abstractions.Date.LinkedHolidayCalendar.Calendar1">
            <summary>
            Calendar 1.
            </summary>
        </member>
        <member name="P:B7.Financial.Abstractions.Date.LinkedHolidayCalendar.Calendar2">
            <summary>
            Calendar 2.
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.LinkedHolidayCalendar.#ctor(B7.Financial.Abstractions.Date.IHolidayCalendar,B7.Financial.Abstractions.Date.IHolidayCalendar)">
            <summary>
            Links two holiday calendars into one.
            </summary>
            <param name="calendar1"></param>
            <param name="calendar2"></param>
        </member>
        <member name="P:B7.Financial.Abstractions.Date.LinkedHolidayCalendar.Name">
            <inheritdoc />
        </member>
        <member name="M:B7.Financial.Abstractions.Date.LinkedHolidayCalendar.IsHoliday(System.DateOnly)">
            <inheritdoc />
        </member>
        <member name="T:B7.Financial.Abstractions.Date.Period">
            <summary>
            Represents a period of time in ISO 8601 format (date components only). <br/>
            Periods can be expressed in years, months, and days (Y/M/D) or weeks (W). <br/>
            If weeks are specified, they cannot be combined with years, months, or days in the same period.
            If Period contains weeks, it is considered a week-based period.
            If Period contains only years, months, and days, it is considered a date-based period.
            Examples: P1Y, P6M, P3W, P10D, P1Y2M10D, P0D.
            </summary>
        </member>
        <member name="P:B7.Financial.Abstractions.Date.Period.Name">
            <summary>
            The unique name (identifier) of the instance of <see cref="T:B7.Financial.Abstractions.Date.Period"/>.
            </summary>
        </member>
        <member name="P:B7.Financial.Abstractions.Date.Period.Zero">
            <summary>
            Zero period, representing no time duration.
            </summary>
        </member>
        <member name="P:B7.Financial.Abstractions.Date.Period.AdditiveIdentity">
            <summary>
            Additive identity for <see cref="T:B7.Financial.Abstractions.Date.Period"/>.
            </summary>
        </member>
        <member name="P:B7.Financial.Abstractions.Date.Period.MaxValue">
            <summary>
            Maximum value for <see cref="T:B7.Financial.Abstractions.Date.Period"/>.
            </summary>
        </member>
        <member name="P:B7.Financial.Abstractions.Date.Period.MinValue">
            <summary>
            Minimum value for <see cref="T:B7.Financial.Abstractions.Date.Period"/>.
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.Period.OfDays(System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:B7.Financial.Abstractions.Date.Period"/> with the specified days.
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.Period.OfMonths(System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:B7.Financial.Abstractions.Date.Period"/> with the specified months.
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.Period.OfWeeks(System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:B7.Financial.Abstractions.Date.Period"/> with the specified weeks.
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.Period.OfYears(System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:B7.Financial.Abstractions.Date.Period"/> with the specified years.
            </summary>
        </member>
        <member name="P:B7.Financial.Abstractions.Date.Period.Years">
            <summary>Year component of the period.</summary>
        </member>
        <member name="P:B7.Financial.Abstractions.Date.Period.Months">
            <summary>Month component of the period.</summary>
        </member>
        <member name="P:B7.Financial.Abstractions.Date.Period.Weeks">
            <summary>Week component of the period.</summary>
        </member>
        <member name="P:B7.Financial.Abstractions.Date.Period.Days">
            <summary>Day component of the period.</summary>
        </member>
        <member name="P:B7.Financial.Abstractions.Date.Period.IsZero">
            <summary>
            Gets a value indicating whether this period has any non-zero components.
            </summary>
        </member>
        <member name="P:B7.Financial.Abstractions.Date.Period.IsNormalized">
            <summary>
            Gets a value indicating whether this period is normalized (Months &lt; 12).
            </summary>
        </member>
        <member name="P:B7.Financial.Abstractions.Date.Period.IsWeekBased">
            <summary>
            Indicates this is a week-based period (W only).
            </summary>
        </member>
        <member name="P:B7.Financial.Abstractions.Date.Period.IsDateBased">
            <summary>
            Indicates this is a date-based period (Y/M/D only).
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.Period.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new instance of <see cref="T:B7.Financial.Abstractions.Date.Period"/> with the specified values.
            </summary>
            <exception cref="T:System.ArgumentException">All values must be non-negative.</exception>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.Period.#ctor(System.Int32)">
            <summary>
            Constructs a new instance of <see cref="T:B7.Financial.Abstractions.Date.Period"/> with the specified number of weeks.
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.Period.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new instance of <see cref="T:B7.Financial.Abstractions.Date.Period"/> with the specified number of years, months, and days.
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.Period.Of(B7.Financial.Abstractions.Name)">
            <summary>
            Retrieves an instance of <see cref="T:B7.Financial.Abstractions.Date.Period"/> based on the provided name.
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.Period.Equals(B7.Financial.Abstractions.Date.Period)">
            <inheritdoc />
        </member>
        <member name="M:B7.Financial.Abstractions.Date.Period.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:B7.Financial.Abstractions.Date.Period.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:B7.Financial.Abstractions.Date.Period.op_Equality(B7.Financial.Abstractions.Date.Period,B7.Financial.Abstractions.Date.Period)">
            <summary>
            Compares two periods for equality.
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.Period.op_Inequality(B7.Financial.Abstractions.Date.Period,B7.Financial.Abstractions.Date.Period)">
            <summary>
            Compares two periods for inequality.
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.Period.ToString">
            <summary>
            Returns a string representation of the period in ISO 8601 format.
            Zero is "P0D".
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.Period.op_Addition(B7.Financial.Abstractions.Date.Period,B7.Financial.Abstractions.Date.Period)">
            <summary>
            Adds two periods using checked arithmetic.
            if the result is Year Based (Years > 0), it normalizes months into years.
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.Period.op_Multiply(B7.Financial.Abstractions.Date.Period,System.Int32)">
            <summary>
            Multiplies a period by a non-negative integer factor using checked arithmetic and normalizes months.
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.Period.op_Multiply(System.Int32,B7.Financial.Abstractions.Date.Period)">
            <summary>
            Multiplies a period by a non-negative integer factor (commutative).
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.Period.Parse(B7.Financial.Abstractions.Name)">
            <summary>
            Parses a period from a string in ISO 8601 format.
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.Period.TryParse(B7.Financial.Abstractions.Name,System.Nullable{B7.Financial.Abstractions.Date.Period}@)">
            <summary>
            Tries to parse a period from a <see cref="P:B7.Financial.Abstractions.Date.Period.Name"/> in ISO 8601 format.
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.Period.TryParse(System.String,System.Nullable{B7.Financial.Abstractions.Date.Period}@)">
            <summary>
            Tries to parse a period from a string in ISO 8601 format.
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.Period.ToTotalMonths">
            <summary>
            Returns the total number of months represented by this period (ignores weeks and days).
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.Period.ToNormalized">
            <summary>
            Normalizes the period by converting months greater than or equal to 12 into years.
            Weeks and days are unchanged.
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.Period.Deconstruct(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Deconstructs the period into its components.
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.Period.Parse(System.String,System.IFormatProvider)">
            <summary>
            Parses a period from a string in ISO 8601 format.
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.Period.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <summary>
            Parses a period from a span of characters in ISO 8601 format.
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.Period.TryParse(System.String,System.IFormatProvider,B7.Financial.Abstractions.Date.Period@)">
            <summary>
            Tries to parse a period from a string in ISO 8601 format.
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.Period.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,B7.Financial.Abstractions.Date.Period@)">
            <summary>
            Tries to parse a period from a span of characters in ISO 8601 format.
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.Period.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <summary>
            Formats as ISO 8601 (e.g., "P1Y2M", "P0D").
            Supported format specifiers:
            - null or "G": default (no transformation)
            - "N": normalize months into years
            - "W": compress days into weeks if no Y/M and divisible by 7
            - "C": canonical (N + W)
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.Period.ToString(System.String,System.IFormatProvider)">
            <summary>
            Formats as ISO 8601 (e.g., "P1Y2M", "P0D").
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.Period.AddTo(System.DateOnly)">
            <summary>
            Applies this period to a DateOnly, in Y -> M -> D order for date-based periods,
            or as 7*W days for week-based periods.
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.Period.ToAddDateAdjuster">
            <summary>
            Creates a <see cref="T:B7.Financial.Abstractions.Date.DateAdjuster"/> that applies this period to a DateOnly.
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.Period.SubtractFrom(System.DateOnly)">
            <summary>
            Subtracts this period from a DateOnly, in Y -> M -> D order for date-based periods,
            or as 7*W days for week-based periods.
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Date.Period.ToSubtractDateAdjuster">
            <summary>
            Creates a <see cref="T:B7.Financial.Abstractions.Date.DateAdjuster"/> that subtracts this period from a DateOnly.
            </summary>
        </member>
        <member name="T:B7.Financial.Abstractions.INamed">
            <summary>
            A named instance.
            </summary>
        </member>
        <member name="P:B7.Financial.Abstractions.INamed.Name">
            <summary>
            The unique name of the instance. <br/>
            </summary>
        </member>
        <member name="T:B7.Financial.Abstractions.INamed`1">
            <summary>
            A named instance.
            <para/>
            This simple interface is used to define objects that can be identified by a unique name. <br/>
            The name contains enough information to be able to recreate the instance.
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.INamed`1.Of(B7.Financial.Abstractions.Name)">
            <summary>
            Factory method.
            </summary>
            <param name="name">The name of the instance</param>
            <returns>Instance of <see cref="!:T"/></returns>
        </member>
        <member name="T:B7.Financial.Abstractions.INamedFactory`1">
            <summary>
            This interface defines a factory for creating named instances of type T.
            </summary>
            <typeparam name="T"> The type of the named instance. </typeparam>
        </member>
        <member name="M:B7.Financial.Abstractions.INamedFactory`1.Of(B7.Financial.Abstractions.Name)">
            <summary>
            Retrieves an instance of type <typeparamref name="T"/> by its name.
            </summary>
            <param name="name"> The name of the instance to retrieve. </param>
            <returns> An instance of type <typeparamref name="T"/>. </returns>
        </member>
        <member name="T:B7.Financial.Abstractions.Name">
            <summary>
            Represents a strongly-typed name.
            </summary>
            <remarks>
            Has implicit conversions to and from <see cref="T:System.String"/>.
            </remarks>
        </member>
        <member name="F:B7.Financial.Abstractions.Name.MaxLength">
            <summary>
            Determines the maximum length of a name.
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Name.Create(System.String)">
            <summary>
            Factory method to create a new instance of <see cref="T:B7.Financial.Abstractions.Name"/> with the specified value.
            </summary>
            <param name="value">The value of the name.</param>
            <returns>A new instance of <see cref="T:B7.Financial.Abstractions.Name"/>.</returns>
        </member>
        <member name="P:B7.Financial.Abstractions.Name.Value">
            <summary>
            The string representation of the name.
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Name.#ctor(System.String)">
            <summary>
            Constructs a new instance of <see cref="T:B7.Financial.Abstractions.Name"/> with the specified value.
            </summary>
            <param name="value">The value of the name.</param>
            <exception cref="T:System.ArgumentException">Thrown when the name is null, whitespace</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the name is too long.</exception>
        </member>
        <member name="M:B7.Financial.Abstractions.Name.AsSpan">
            <summary>
            Creates a new readonly span over the <see cref="T:B7.Financial.Abstractions.Name"/>.
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Name.ToString">
            <summary>
            Overrides the ToString method to return the name value.
            </summary>
            <returns>The name value.</returns>
        </member>
        <member name="M:B7.Financial.Abstractions.Name.Equals(B7.Financial.Abstractions.Name)">
            <inheritdoc/>
        </member>
        <member name="M:B7.Financial.Abstractions.Name.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:B7.Financial.Abstractions.Name.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:B7.Financial.Abstractions.Name.op_Implicit(B7.Financial.Abstractions.Name)~System.String">
            <summary>
            Implicit conversion from <see cref="T:B7.Financial.Abstractions.Name"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="name"> The name instance to convert. </param>
        </member>
        <member name="M:B7.Financial.Abstractions.Name.op_Implicit(System.String)~B7.Financial.Abstractions.Name">
            <summary>
            Implicit conversion from <see cref="T:System.String"/> to <see cref="T:B7.Financial.Abstractions.Name"/>.
            </summary>
            <param name="value"> The string value to convert. </param>
        </member>
        <member name="T:B7.Financial.Abstractions.Schedule.Frequency">
            <summary>
            A periodic frequency used by financial products that have a specific event every so often.
            <para>
            Frequency is primarily intended to be used to subdivide events within a year. <br/>
            A frequency is allowed to be any non-negative <see cref="T:B7.Financial.Abstractions.Date.Period"/>. <br/>
            A special value, <see cref="F:B7.Financial.Abstractions.Schedule.Frequency.Term"/>, is provided for when there are no subdivisions of the entire term. <br/>
            This is also known as 'zero-coupon' or 'once'.
            </para>
            </summary>
        </member>
        <member name="F:B7.Financial.Abstractions.Schedule.Frequency.Term">
            <summary>
            A periodic frequency matching the term. <br/>
            Also known as zero-coupon. <br/>
            This is represented using <see cref="P:B7.Financial.Abstractions.Date.Period.MaxValue"/>. <br/>
            There are no events per year with this frequency.
            </summary>
        </member>
        <member name="P:B7.Financial.Abstractions.Schedule.Frequency.Name">
            <summary>
            Gets the name of the frequency. <br/>
            For the term frequency this is "Term", otherwise the ISO 8601 period text.
            </summary>
        </member>
        <member name="P:B7.Financial.Abstractions.Schedule.Frequency.Period">
            <summary>
            Period of the frequency. <br/>
            </summary>
        </member>
        <member name="P:B7.Financial.Abstractions.Schedule.Frequency.EventsPerYear">
            <summary>
            Exact whole number of events per (synthetic) year, or -1 if not an even divisor
            of 12 months (month-based) or 364 days (day/week-based).
            </summary>
        </member>
        <member name="P:B7.Financial.Abstractions.Schedule.Frequency.EventsPerYearEstimate">
            <summary>
            Estimated events per year (decimal). -1 when not computable under current rules.
            </summary>
        </member>
        <member name="P:B7.Financial.Abstractions.Schedule.Frequency.HasExactEventsPerYear">
            <summary>
            Indicates this frequency has an exact integral events-per-year value (EventsPerYear > 0).
            </summary>
        </member>
        <member name="P:B7.Financial.Abstractions.Schedule.Frequency.IsRegular">
            <summary>
            Alias for <see cref="P:B7.Financial.Abstractions.Schedule.Frequency.HasExactEventsPerYear"/> (semantic clarity in some domains).
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Schedule.Frequency.#ctor(B7.Financial.Abstractions.Date.Period)">
            <summary>
            Constructs a frequency based on the specified period.
            </summary>
            <param name="period">The period for this frequency.</param>
        </member>
        <member name="M:B7.Financial.Abstractions.Schedule.Frequency.Parse(B7.Financial.Abstractions.Name)">
            <summary>
            Parses a frequency from its string representation.
            </summary>
            <param name="value">The string representation (either "Term" or ISO 8601 period).</param>
            <returns>The parsed frequency.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the value cannot be parsed.</exception>
        </member>
        <member name="M:B7.Financial.Abstractions.Schedule.Frequency.TryParse(B7.Financial.Abstractions.Name,System.Nullable{B7.Financial.Abstractions.Schedule.Frequency}@)">
            <summary>
            Tries to parse a frequency from its string representation.
            </summary>
            <param name="value">The string representation.</param>
            <param name="frequency">The parsed frequency if successful.</param>
            <returns>True if parsing succeeded, false otherwise.</returns>
        </member>
        <member name="M:B7.Financial.Abstractions.Schedule.Frequency.TryFromEventsPerYear(System.Int32,System.Nullable{B7.Financial.Abstractions.Schedule.Frequency}@)">
            <summary>
            Attempts to construct a frequency from an integer events-per-year value.
            Supports:
            - Month-based divisors of 12 (e.g. 12, 6, 4, 3, 2, 1)
            - Week-based divisors of 52
            - Day-based divisors of 364
            Returns false if no exact canonical period can be produced.
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Schedule.Frequency.FromEventsPerYear(System.Int32)">
            <summary>
            Creates a frequency from events per year, throwing an exception if not possible.
            </summary>
            <param name="eventsPerYear">Number of events per year.</param>
            <returns>A frequency instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when eventsPerYear cannot be represented as an exact frequency.</exception>
        </member>
        <member name="M:B7.Financial.Abstractions.Schedule.Frequency.Deconstruct(B7.Financial.Abstractions.Date.Period@,System.Int32@,System.Decimal@)">
            <summary>
            Deconstructs the frequency into its core components.
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Schedule.Frequency.ToString">
            <summary>
            String representation of the frequency.
            </summary>
            <returns>The frequency name.</returns>
        </member>
        <member name="P:B7.Financial.Abstractions.Schedule.Frequency.IsTerm">
            <summary>
            Indicates if the frequency is the term frequency.
            </summary>
        </member>
        <member name="P:B7.Financial.Abstractions.Schedule.Frequency.IsWeekBased">
            <summary>
            Indicates if the periodic frequency is based on weeks.
            </summary>
        </member>
        <member name="P:B7.Financial.Abstractions.Schedule.Frequency.IsMonthBased">
            <summary>
            Indicates if the periodic frequency is based on months.
            </summary>
        </member>
        <member name="P:B7.Financial.Abstractions.Schedule.Frequency.IsDayBased">
            <summary>
            Indicates if the periodic frequency is based on days.
            </summary>
        </member>
        <member name="P:B7.Financial.Abstractions.Schedule.Frequency.IsAnnual">
            <summary>
            Checks if the periodic frequency is annual.
            <remarks>
            An annual frequency consists of 12 months. <br/>
            The period must be exactly 12 months with no weeks or days. <br/>
            </remarks>
            </summary>
        </member>
        <member name="P:B7.Financial.Abstractions.Schedule.Frequency.IsQuarterly">
            <summary>
            Checks if the periodic frequency is quarterly (3 months).
            </summary>
        </member>
        <member name="P:B7.Financial.Abstractions.Schedule.Frequency.IsMonthly">
            <summary>
            Checks if the periodic frequency is monthly (1 month).
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Schedule.Frequency.ToReciprocal">
            <summary>
            Returns the reciprocal frequency if this frequency has exact events per year.
            For example, Monthly (12 events) returns Annual (1 event), Quarterly (4 events) returns Annual, etc.
            </summary>
            <returns>The reciprocal frequency.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the frequency doesn't have exact events per year.</exception>
        </member>
        <member name="M:B7.Financial.Abstractions.Schedule.Frequency.TryGetReciprocal(B7.Financial.Abstractions.Schedule.Frequency@)">
            <summary>
            Attempts to get the reciprocal frequency.
            </summary>
            <param name="reciprocal">The reciprocal frequency if successful.</param>
            <returns>True if reciprocal could be computed, false otherwise.</returns>
        </member>
        <member name="M:B7.Financial.Abstractions.Schedule.Frequency.IsCompatibleWith(B7.Financial.Abstractions.Schedule.Frequency)">
            <summary>
            Determines if this frequency is compatible with the specified frequency.
            Frequencies are compatible if they have the same base type (day/week/month).
            </summary>
            <param name="other">The frequency to check against.</param>
            <returns>True if the frequencies are compatible.</returns>
        </member>
        <member name="M:B7.Financial.Abstractions.Schedule.Frequency.Equals(B7.Financial.Abstractions.Schedule.Frequency)">
            <inheritdoc />
        </member>
        <member name="M:B7.Financial.Abstractions.Schedule.Frequency.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:B7.Financial.Abstractions.Schedule.Frequency.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:B7.Financial.Abstractions.Schedule.Frequency.op_Equality(B7.Financial.Abstractions.Schedule.Frequency,B7.Financial.Abstractions.Schedule.Frequency)">
            <summary>
            Compares two frequencies for equality.
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Schedule.Frequency.op_Inequality(B7.Financial.Abstractions.Schedule.Frequency,B7.Financial.Abstractions.Schedule.Frequency)">
            <summary>
            Compares two frequencies for inequality.
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Schedule.Frequency.ToNormalized">
            <summary>
            Normalizes the months and years of this tenor.
            <para>
            This method returns a tenor of an equivalent length but with any number <br/>
            of months greater than 12 normalized into a combination of months and years.
            </para>
            </summary>
            <returns>The normalized tenor</returns>
        </member>
        <member name="M:B7.Financial.Abstractions.Schedule.Frequency.op_Addition(B7.Financial.Abstractions.Schedule.Frequency,B7.Financial.Abstractions.Date.Period)">
            <summary>
            Adds a period to a frequency.
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Schedule.Frequency.AddTo(System.DateOnly)">
            <summary>
            Adds the current frequency to the specified date and returns the resulting date.
            </summary>
            <param name="date">The starting date to which the frequency will be added.</param>
            <returns>A <see cref="T:System.DateOnly"/> representing the resulting date after adding the frequency.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the frequency represents a term and cannot be added to a date.</exception>
        </member>
        <member name="M:B7.Financial.Abstractions.Schedule.Frequency.ToAddDateAdjuster">
            <summary>
            Creates a <see cref="T:B7.Financial.Abstractions.Date.DateAdjuster"/> that adds the current frequency to a date.
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Schedule.Frequency.SubtractFrom(System.DateOnly)">
            <summary>
            Subtracts the current frequency from the specified date and returns the resulting date.
            </summary>
            <param name="date">The starting date from which the frequency will be subtracted.</param>
            <returns>A <see cref="T:System.DateOnly"/> representing the resulting date after subtracting the frequency.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the frequency represents a term and cannot be subtracted from a date.</exception>
        </member>
        <member name="M:B7.Financial.Abstractions.Schedule.Frequency.ToSubtractDateAdjuster">
            <summary>
            Creates a <see cref="T:B7.Financial.Abstractions.Date.DateAdjuster"/> that subtracts the current frequency from a date.
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Schedule.Frequency.TryExactDivide(B7.Financial.Abstractions.Schedule.Frequency,System.Int32@)">
            <summary>
            Attempts to compute an exact integer factor n such that:
                this = subFrequency * n
            for compatible base types (month-based, week-based, or day-based).
            Returns false when:
            - Either frequency is Term
            - Bases differ (month vs week vs day)
            - Periods are irregular mixed Y/M/D (contain both months>0 and days>0) 
            - Division is not exact
            </summary>
            <param name="subFrequency">Candidate sub-frequency (must be same or smaller)</param>
            <param name="factor">Resulting integer factor (>=1) when successful.</param>
        </member>
        <member name="M:B7.Financial.Abstractions.Schedule.Frequency.ExactDivide(B7.Financial.Abstractions.Schedule.Frequency)">
            <summary>
            Computes an exact integer factor n such that:
                this = subFrequency * n
            for compatible base types (month / week / day).
            Throws when:
            - Not exact
            - Bases differ
            - Term involved
            - Irregular unsupported period shapes
            </summary>
            <param name="subFrequency">Candidate sub-frequency (same base, not larger).</param>
            <returns>Integer factor (>=1).</returns>
            <exception cref="T:System.InvalidOperationException">Division not exact or frequencies incompatible.</exception>
        </member>
        <member name="T:B7.Financial.Abstractions.Schedule.IFrequencyFactory">
            <summary>
            Represents a factory for creating frequency instances.
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Schedule.IFrequencyFactory.FrequencyNames">
            <summary>
            Retrieves the names of all available predefined frequency instances.
            </summary>
            <returns> A collection of predefined frequency names. </returns>
        </member>
        <member name="M:B7.Financial.Abstractions.Schedule.IFrequencyFactory.OfDays(System.Int32)">
            <summary>
            Creates a <see cref="T:B7.Financial.Abstractions.Schedule.Frequency"/> instance representing a frequency based on the specified number of days.
            </summary>
            <param name="days">The number of days to represent as a frequency. Must be a positive integer.</param>
            <returns>A <see cref="T:B7.Financial.Abstractions.Schedule.Frequency"/> instance corresponding to the specified number of days.</returns>
        </member>
        <member name="M:B7.Financial.Abstractions.Schedule.IFrequencyFactory.OfWeeks(System.Int32)">
            <summary>
            Creates a <see cref="T:B7.Financial.Abstractions.Schedule.Frequency"/> instance representing a frequency based on the specified number of weeks.
            </summary>
            <param name="weeks">The number of weeks to represent as a frequency. Must be a positive integer.</param>
            <returns>A <see cref="T:B7.Financial.Abstractions.Schedule.Frequency"/> instance corresponding to the specified number of weeks.</returns>
        </member>
        <member name="M:B7.Financial.Abstractions.Schedule.IFrequencyFactory.OfMonths(System.Int32)">
            <summary>
            Creates a <see cref="T:B7.Financial.Abstractions.Schedule.Frequency"/> instance representing a recurrence interval in months.
            </summary>
            <param name="months">The number of months for the recurrence interval. Must be greater than zero.</param>
            <returns>A <see cref="T:B7.Financial.Abstractions.Schedule.Frequency"/> instance configured with the specified monthly interval.</returns>
        </member>
        <member name="M:B7.Financial.Abstractions.Schedule.IFrequencyFactory.OfYears(System.Int32)">
            <summary>
            Creates a <see cref="T:B7.Financial.Abstractions.Schedule.Frequency"/> instance representing a recurrence interval in years.
            </summary>
            <param name="years">The number of years for the recurrence interval. Must be greater than zero.</param>
            <returns>A <see cref="T:B7.Financial.Abstractions.Schedule.Frequency"/> instance configured with the specified yearly interval.</returns>
        </member>
        <member name="T:B7.Financial.Abstractions.Schedule.IRollConvention">
            <summary>
            A convention defining how to roll dates.
            <para>
            A <see cref="T:B7.Financial.Abstractions.Schedule.Frequency"/> defines the periodicity of the roll. <br/>
            When applying the frequency, the roll convention is used to fine tune the dates. <br/>
            This might involve selecting the last day of the month, or the third Wednesday.
            </para>
            <para>
            To get the next date in the schedule, take the base date and the <br/>
            periodic <see cref="T:B7.Financial.Abstractions.Schedule.Frequency"/> and apply the roll convention. <br/>
            the roll convention is applied to produce the next schedule date.
            </para>
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Schedule.IRollConvention.Adjust(System.DateOnly)">
            <summary>
            Adjusts the given date according to the roll convention.
            <para>
            It is recommended to use <see cref="M:B7.Financial.Abstractions.Schedule.IRollConvention.Next(System.DateOnly,B7.Financial.Abstractions.Schedule.Frequency)"/> and <see cref="M:B7.Financial.Abstractions.Schedule.IRollConvention.Previous(System.DateOnly,B7.Financial.Abstractions.Schedule.Frequency)"/> rather than <br/>
            directly using this method.
            </para>
            </summary>
            <param name="date">The date to adjust.</param>
            <returns>The adjusted date.</returns>
        </member>
        <member name="M:B7.Financial.Abstractions.Schedule.IRollConvention.Matches(System.DateOnly)">
            <summary>
            Checks if the date matches the rules of the roll convention. <br/>
            See the description of each roll convention to understand the rule applied.
            </summary>
            <param name="date">The date to check.</param>
            <returns>True if the date matches the roll convention; otherwise, false.</returns>
        </member>
        <member name="M:B7.Financial.Abstractions.Schedule.IRollConvention.Next(System.DateOnly,B7.Financial.Abstractions.Schedule.Frequency)">
            <summary>
            Calculates the next date based on the given date and periodic frequency. <br/>
            This takes the input date, adds the periodic frequency and adjusts the date <br/>
            as necessary to match the roll convention rules. <br/>
            The result will always be after the input date.
            </summary>
            <param name="date">The date to adjust.</param>
            <param name="periodicFrequency">The frequency of the periodic event.</param>
            <returns>The next date based on the roll convention.</returns>
        </member>
        <member name="M:B7.Financial.Abstractions.Schedule.IRollConvention.Previous(System.DateOnly,B7.Financial.Abstractions.Schedule.Frequency)">
            <summary>
            Calculates the previous date based on the specified starting date and periodic frequency. <br/>
            This takes the input date, subtracts the periodic frequency and adjusts the date <br/>
            as necessary to match the roll convention rules. <br/>
            The result will always be before the input date.
            </summary>
            <param name="date">The date to adjust.</param>
            <param name="periodicFrequency">The frequency of the periodic event.</param>
            <returns>The previous date based on the roll convention.</returns>
        </member>
        <member name="P:B7.Financial.Abstractions.Schedule.IRollConvention.DayOfMonth">
            <summary>
            Gets the day-of-month that the roll convention implies.
            <para>
            This extracts the day-of-month for simple roll conventions. <br/>
            The numeric roll conventions will return their day-of-month. <br/>
            The 'EOM' convention will return 31. <br/>
            All other conventions will return zero (0).
            </para>
            </summary>
        </member>
        <member name="T:B7.Financial.Abstractions.Schedule.IRollConventionFactory">
            <summary>
            Represents a factory for creating roll convention instances.
            </summary>
        </member>
        <member name="M:B7.Financial.Abstractions.Schedule.IRollConventionFactory.RollConventionNames">
            <summary>
            Retrieves the names of all available predefined <see cref="T:B7.Financial.Abstractions.Schedule.IRollConvention"/> instances.
            </summary>
            <returns> A collection of predefined Roll Convention names. </returns>
        </member>
        <member name="M:B7.Financial.Abstractions.Schedule.IRollConventionFactory.OfDayOfMonth(System.Byte)">
            <summary>
            Obtains an instance from the day-of-month.
            <para>
            This convention will adjust the input date to the specified day-of-month. <br/>
            The year and month of the result date will be the same as the input date. <br/>
            It is intended for use with periods that are a multiple of months.
            </para>
            <para>
            If the month being adjusted has a length less than the requested day-of-month <br/>
            then the last valid day-of-month will be chosen. As such, passing 31 to this <br/>
            method is equivalent to selecting the end-of-month convention.
            </para>
            </summary>
            <param name="dayOfMonth">The day-of-month, form 1 to 31</param>
            <returns>The <see cref="T:B7.Financial.Abstractions.Schedule.IRollConvention"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the day-of-month is not between 1 and 31.</exception>
        </member>
        <member name="M:B7.Financial.Abstractions.Schedule.IRollConventionFactory.OfDayOfWeek(System.DayOfWeek)">
            <summary>
            Obtains an instance from the day-of-week.
            <para>
            This convention will adjust the input date to the specified day-of-week. <br/>
            It is intended for use with <see cref="P:B7.Financial.Abstractions.Schedule.Frequency.Period"/> that are a multiple of weeks.
            </para>
            <para>
            In <see cref="M:B7.Financial.Abstractions.Schedule.IRollConvention.Adjust(System.DateOnly)"/>, if the input date is not the required day-of-week, <br/>
            then the next occurrence of the day-of-week is selected, up to 6 days later.
            </para>
            <para>
            In <see cref="M:B7.Financial.Abstractions.Schedule.IRollConvention.Next(System.DateOnly,B7.Financial.Abstractions.Schedule.Frequency)"/>, the day-of-week is selected after the frequency is added. <br/>
            If the calculated date is not the required day-of-week, then the next occurrence <br/>
            of the day-of-week is selected, up to 6 days later.
            </para>
            <para>
            In <see cref="M:B7.Financial.Abstractions.Schedule.IRollConvention.Previous(System.DateOnly,B7.Financial.Abstractions.Schedule.Frequency)"/>, the day-of-week is selected after the frequency is subtracted. <br/>
            If the calculated date is not the required day-of-week, then the previous occurrence <br/>
            of the day-of-week is selected, up to 6 days earlier.
            </para>
            </summary>
            <param name="dayOfWeek">The day-of-week.</param>
            <returns>The <see cref="T:B7.Financial.Abstractions.Schedule.IRollConvention"/> instance.</returns>
        </member>
    </members>
</doc>
